apiVersion: v1
kind: PersistentVolume
metadata:
  name: sqldata
spec:
  capacity:
    storage: 8Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/sqldata"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mssql-data-claim
spec:
  # volumeBindingMode: WaitForFirstConsumer
  # ReadWriteOnce > ReadWriteMany
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 8Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mssql
spec:
  type: ClusterIP
  ports:
    -
      port: 1433
      targetPort: 1433
      protocol: TCP
  selector:
    app: mssql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mssql
  labels:
    app: mssql
spec:
  selector:
    matchLabels:
      app: mssql
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mssql
    spec:
      terminationGracePeriodSeconds: 10
      securityContext:
        fsGroup: 10001
      volumes:
        - name: mssqldb
          persistentVolumeClaim:
            claimName: mssql-data-claim
      containers:
        - name: mssql
          image: mcr.microsoft.com/mssql/server:2019-latest
          resources:
            limits:
              memory: 2Gi
              cpu: 500m
          ports:
            - containerPort: 1433
          env:
            - name: MSSQL_PID
              value: Express
            - name: ACCEPT_EULA
              value: 'Y'
            - name: SA_PASSWORD
              value: P@ssw0rd!
            - name: MSSQL_SA_PASSWORD
              value: P@ssw0rd!
          volumeMounts:
            - name: mssqldb
              mountPath: /var/opt/mssql
    # - name: SA_PASSWORD
    #   valueFrom:
    #     secretKeyRef:
    #       name: sql-password
    #       key: sa_password
    # kubectl create secret generic sql-password --from-literal=sa_password=Passw0rd
    # https://stackoverflow.com/questions/63217356/sql-server-pods-with-persistentvolumeclaim